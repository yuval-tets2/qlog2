/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCatalogArgs } from "./CreateCatalogArgs";
import { UpdateCatalogArgs } from "./UpdateCatalogArgs";
import { DeleteCatalogArgs } from "./DeleteCatalogArgs";
import { CatalogCountArgs } from "./CatalogCountArgs";
import { CatalogFindManyArgs } from "./CatalogFindManyArgs";
import { CatalogFindUniqueArgs } from "./CatalogFindUniqueArgs";
import { Catalog } from "./Catalog";
import { ProductType } from "../../productType/base/ProductType";
import { CatalogService } from "../catalog.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Catalog)
export class CatalogResolverBase {
  constructor(
    protected readonly service: CatalogService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Catalog",
    action: "read",
    possession: "any",
  })
  async _catalogsMeta(
    @graphql.Args() args: CatalogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Catalog])
  @nestAccessControl.UseRoles({
    resource: "Catalog",
    action: "read",
    possession: "any",
  })
  async catalogs(
    @graphql.Args() args: CatalogFindManyArgs
  ): Promise<Catalog[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Catalog, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Catalog",
    action: "read",
    possession: "own",
  })
  async catalog(
    @graphql.Args() args: CatalogFindUniqueArgs
  ): Promise<Catalog | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Catalog)
  @nestAccessControl.UseRoles({
    resource: "Catalog",
    action: "create",
    possession: "any",
  })
  async createCatalog(
    @graphql.Args() args: CreateCatalogArgs
  ): Promise<Catalog> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        productType: args.data.productType
          ? {
              connect: args.data.productType,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Catalog)
  @nestAccessControl.UseRoles({
    resource: "Catalog",
    action: "update",
    possession: "any",
  })
  async updateCatalog(
    @graphql.Args() args: UpdateCatalogArgs
  ): Promise<Catalog | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          productType: args.data.productType
            ? {
                connect: args.data.productType,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Catalog)
  @nestAccessControl.UseRoles({
    resource: "Catalog",
    action: "delete",
    possession: "any",
  })
  async deleteCatalog(
    @graphql.Args() args: DeleteCatalogArgs
  ): Promise<Catalog | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductType, {
    nullable: true,
    name: "productType",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductType",
    action: "read",
    possession: "any",
  })
  async resolveFieldProductType(
    @graphql.Parent() parent: Catalog
  ): Promise<ProductType | null> {
    const result = await this.service.getProductType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
